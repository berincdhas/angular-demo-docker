name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-angular:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18]
    name: Build Angular App (Node ${{ matrix.node }})
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build -- --configuration=production

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node }}
          path: dist

  test:
    needs: build-angular
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --watch=false --browsers=ChromeHeadless

  docker-build:
    needs: build-angular
    runs-on: ubuntu-latest
    name: Build Docker Image
    steps:
      - uses: actions/checkout@v4

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [docker-build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    name: Deploy to Production
    environment:
      name: production
      url: https://your-app-url.example.com
    steps:
      - name: Deployment step
        run: echo "Trigger your deployment here (e.g., using kubectl, helm, ssh, or a cloud CLI)"
        # Replace the above with actual deployment logic as per your infrastructure

      - name: Notify
        run: echo "Deployment completed successfully!"

# Notes:
# - Set up secrets: GHCR authentication is handled automatically with GITHUB_TOKEN; configure other secrets as needed for deployment.
# - Replace deployment step with your actual deployment commands.
# - Adjust IMAGE_NAME/REGISTRY if you want to prefer Docker Hub (update registry/login/actions accordingly).
