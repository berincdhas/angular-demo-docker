name: CI/CD - Angular Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    name: Lint, Test, and Build Angular App

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use Node.js with caching
      - name: Use Node.js and enable npm cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Lint the codebase
      - name: Lint Angular app
        run: npm run lint

      # Run unit tests with JUnit report
      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      # Build Angular app
      - name: Build Angular app
        run: npm run build -- --configuration production

      # Upload build output as an artifact for Docker job (optional, for PRs)
      - name: Upload dist folder
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  docker:
    needs: lint-test-build
    runs-on: ubuntu-latest
    name: Build and Publish Docker Image

    steps:
      # Checkout code as Docker context may need full repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Docker Buildx for advanced features and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Log in to DockerHub (uses repository secrets)
      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract image tag information (use branch or short SHA for tags)
      - name: Extract Docker image tag
        id: extract_tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG=pr-${{ github.event.pull_request.number }}
          else
            TAG=${GITHUB_SHA::8}
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # Build and push Docker image with advanced caching
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ steps.extract_tag.outputs.tag }},${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:latest
          # Enable BuildKit inline cache
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      # Image digest output (useful for traceability)
      - name: Image digest
        run: echo "Image digest: ${{ steps.build-and-push.outputs.digest }}"

# Notes:
# - This workflow uses npm and Docker layer caching for fast builds.
# - Docker image is tagged with short SHA and 'latest' (on pushes to main).
# - The build will only push images on push to main (pull requests won't push).
# - Assumes the Dockerfile uses multi-stage best practices.
# - Make sure you have set 'DOCKERHUB_USERNAME' and 'DOCKERHUB_TOKEN' secrets.
# - Modify build/test commands if your Angular app uses custom scripts.
