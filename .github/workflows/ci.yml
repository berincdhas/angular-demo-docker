name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-lint:
    # Build Matrix for multiple Node.js versions
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Restore npm cache to speed up installs
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-npm-

      # Step 3: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 5: Lint codebase
      - name: Lint project
        run: npm run lint

      # Step 6: Run unit tests and generate test reports
      - name: Run tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI --code-coverage

      # Step 7: Build Angular app for production
      - name: Build Angular app
        run: npm run build -- --configuration=production

      # Step 8: Upload build artifacts for usage in later jobs
      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist-${{ matrix.node-version }}
          path: dist/
          retention-days: 3

  docker-build-deploy:
    needs: build-test-lint
    runs-on: ubuntu-latest
    # Only run deploy from main branch and Node 20.x (latest recommended)
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Download build artifacts from the build job
      - name: Download production build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist-20.x
          path: dist/

      # Step 3: Set up Docker Buildx for advanced Docker features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Cache Docker layers for faster builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 5: Log in to Docker Hub (secrets must be stored in repository settings)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Build and push Docker image with cache and git SHA/tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:latest,${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            BUILD_PATH=dist/

      # Step 7: Upload Docker image digest as artifact for traceability
      - name: Upload Docker image digest
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-digest
          path: ./digest.txt

      # Step 8: Post-build clean up (optional best practice)
      - name: Remove dangling Docker images
        run: |
          docker image prune -af
