name: CI/CD Pipeline for Angular with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-lint:
    name: Build, Test, and Lint Angular App
    runs-on: ubuntu-latest
    steps:
      # Checkout source code from repo
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Use Node.js 18.x; Angular CLI recommends LTS
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Restore npm cache, prioritizing speed and reliability
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Install dependencies (fail fast on errors)
      - name: Install Dependencies
        run: npm ci

      # Lint the app for code quality. Fail on lint errors.
      - name: Lint Angular App
        run: npm run lint

      # Run unit tests (fail the build if any fail)
      - name: Run Unit Tests
        run: npm test -- --browsers=ChromeHeadlessCI --watch=false --no-progress --code-coverage

      # Build the application for production
      - name: Build Angular App
        run: npm run build -- --configuration=production

    outputs:
      # Output the app build directory for Docker packaging
      build-path: dist

  docker:
    name: Build and Push Docker Image
    needs: build-test-lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      # Repeat checkout for Docker context
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Login to Docker Hub using GitHub secrets (best practice: never hardcode)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and tag Docker image
      # Assumes Dockerfile is set up to COPY Angular 'dist' output. Customize as needed.
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:latest .

      # Push only if all previous steps succeeded and we're on main branch.
      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:latest

# Assumptions and Best-Practices:
# - Only push to Docker Hub from 'main' branch, never from PRs or forks.
# - Docker Hub credentials (DOCKERHUB_USERNAME, DOCKERHUB_TOKEN) are stored in GitHub Secrets.
# - Angular CLI and project configured for production builds, with output in /dist.
# - Dockerfile present in repo root, expects output at /dist for packaging.
# - Fail fast: each step stops pipeline on error, ensuring reliability.
# - All caching is done via recommended GitHub Actions cache.
# - Use Buildx for efficient cross-platform Docker builds and compatibility.

# For optimal security:
# - Use granular read/write secrets.
# - Rotate Docker Hub tokens periodically.
# - Optionally, enable branch protection to restrict merges into main.
