name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & Test (Node.js Matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (matrix)
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Restore npm cache for dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 5: Lint code base
      - name: Lint Angular app
        run: npm run lint

      # Step 6: Run unit tests
      - name: Run unit tests
        run: npm test -- --watch=false --browsers=ChromeHeadless

      # Step 7: Build Angular app (only on one Node version)
      - name: Build Angular app
        if: matrix.node-version == '18.x'
        run: npm run build -- --configuration=production

      # Step 8: Upload dist folder as artifact for later jobs
      - name: Upload production build artifact
        if: matrix.node-version == '18.x'
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' # Restrict deployment only to main branch
    steps:
      # Step 1: Checkout code (needed for Docker context)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Download production build artifact
      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Build and push Docker image using multi-stage Dockerfile
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:latest
          build-args: |
            BUILD_FOLDER=dist

      # Step 6: Logout from Docker Hub
      - name: Log out from Docker Hub
        run: docker logout

# Note: 
# - Replace secrets.DOCKERHUB_USERNAME and secrets.DOCKERHUB_TOKEN with your Docker Hub credentials in repository secrets.
# - Ensure your Dockerfile is set up for multi-stage Angular builds and expects 'dist' as the build folder.
# - Artifacts pass build outputs between jobs for clean separation and scalability.
# - Only pushes to 'main' deploy Docker images. Pull requests won't deploy.
