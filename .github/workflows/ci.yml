name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: angular-demo-docker
  REGISTRY: docker.io
  DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Archive test coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/

      - name: Build Angular app
        run: npm run build -- --configuration production

      - name: Determine Docker image tag (with short SHA)
        id: meta
        run: echo "version=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image (multi-stage)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          tags: ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.meta.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            NODE_ENV=production

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull cached image
        run: |
          docker pull ${{ env.DOCKERHUB_REPOSITORY }}:${{ needs.build-test.outputs.image-tag }} || true

      - name: Push Docker image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPOSITORY }}:${{ needs.build-test.outputs.image-tag }}
            ${{ env.DOCKERHUB_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            NODE_ENV=production

      - name: Notify GitHub of Deployment Success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Docker image "${{ env.IMAGE_NAME }}" successfully deployed'
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          body: |
            The Docker image ${{ env.DOCKERHUB_REPOSITORY }}:${{ needs.build-test.outputs.image-tag }} has been pushed to Docker Hub.

      - name: Notify on Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'CI/CD Pipeline Failed for "${{ env.IMAGE_NAME }}"'
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          body: |
            CI/CD pipeline failed for ${{ env.IMAGE_NAME }}. Please see GitHub Actions logs for details.
