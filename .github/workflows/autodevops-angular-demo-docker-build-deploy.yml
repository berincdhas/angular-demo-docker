name: autodevops-angular-demo-docker-build-deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: autodevops-angular-demo-docker-build-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  actions: read
  packages: write

jobs:
  code-quality-and-security:
    name: Lint, Format Check & Code Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Check formatting
        run: npx prettier --check .
      - name: Lint code
        run: npm run lint --if-present
      - name: Run code scanning (CodeQL)
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality-and-security
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

  build-app:
    name: Build Angular App
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build app for production
        run: npm run build -- --configuration production
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/

  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-app
    if: github.event_name != 'pull_request'
    timeout-minutes: 20
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            DIST_PATH=dist/
      - name: Logout from Docker registry
        run: docker logout ${{ env.REGISTRY }}

  deploy:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    environment:
      name: production
      url: ${{ steps.deploy-url.outputs.url }}
    steps:
      - name: Download deployment manifest (replace with actual manifest as needed)
        run: echo "Replace this step with deployment to your production environment."
      - name: Set deployment url output
        id: deploy-url
        run: echo "url=https://your-app-url.example.com" >> $GITHUB_OUTPUT
