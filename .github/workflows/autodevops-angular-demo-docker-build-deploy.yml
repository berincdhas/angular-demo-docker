name: autodevops-angular-demo-docker-build-deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  build:
    name: Build Angular Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for lint script
        id: lint-check
        run: |
          if jq -er '.scripts.lint' package.json > /dev/null; then
            echo "has_lint=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_lint=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Lint code
        if: steps.lint-check.outputs.has_lint == 'true'
        run: npm run lint

      - name: Warn if lint script missing
        if: steps.lint-check.outputs.has_lint == 'false'
        run: |
          echo "::warning title=Lint Skipped::No 'lint' script found in package.json. Skipping lint step."

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless || npm run test -- --watch=false || npm test

      - name: Build Angular app
        run: npm run build -- --configuration=production || npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-build
          path: dist/

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-build
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload image digest
        run: echo "${{ steps.meta.outputs.tags }}" > image-tags.txt

      - name: Upload Docker tags artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tags
          path: image-tags.txt

  deploy:
    name: Deploy Application
    needs: docker
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: production
      url: ${{ steps.deployurl.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker tags artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-tags

      - name: Set up deployment prerequisites
        run: |
          echo "Preparing for deployment..."
          # Add environment setup or secrets decoding here as needed

      - name: Deploy to server
        id: deployurl
        env:
          IMAGE_TAGS: ${{ secrets.IMAGE_TAGS }}
        run: |
          IMAGES=$(cat image-tags.txt)
          echo "Would deploy the following image(s): $IMAGES"
          DEPLOY_URL="https://example.com/${GITHUB_REPOSITORY#*/}"
          echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
