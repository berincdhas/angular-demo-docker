name: autodevops-angular-demo-docker-build-deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: autodevops-angular-demo-docker-build-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Angular Application
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Check for npm lint script
        id: check_lint
        run: |
          if npm run | grep -q "lint"; then
            echo "has-lint=true" >> $GITHUB_OUTPUT
          else
            echo "has-lint=false" >> $GITHUB_OUTPUT
          fi
      - name: Run static code analysis
        if: steps.check_lint.outputs.has-lint == 'true'
        run: npm run lint
      - name: Skipped static code analysis
        if: steps.check_lint.outputs.has-lint == 'false'
        run: echo "No lint script found, skipping static analysis."

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    environment:
      name: production
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/angular-demo-docker:latest .
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/angular-demo-docker:latest

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: docker
    permissions:
      contents: read
    timeout-minutes: 10
    environment:
      name: production
    steps:
      - name: Deploy to production server
        run: echo "Deploy step placeholder"
