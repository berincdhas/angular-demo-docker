name: angular-demo-docker-build-deploy
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: build-deploy-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage

      - name: Build production
        run: npm run build -- --configuration=production

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/

  dockerize:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/angular-demo-docker:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Image digest
        run: echo "Docker image digest ${{ steps.docker_build.outputs.digest }}"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: dockerize
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/

      - name: Set up deployment credentials
        run: echo "Configure your deployment secrets and credentials here."
        shell: bash

      - name: Deploy to cloud/VM
        id: deploy
        run: |
          echo "Deploying docker image ${{ needs.dockerize.outputs.image }}"
          # Actual deploy step placeholder
          # Use SSH, cloud provider, or GitHub Deployments API here
          DEPLOYMENT_URL="https://yourapp.example.com"
          echo "url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT

  security:
    name: Code Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependabot:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --production --audit-level=high || true