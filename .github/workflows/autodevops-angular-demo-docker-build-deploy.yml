name: autodevops-angular-demo-docker-build-deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: autodevops-angular-demo-docker-build-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint-format-code-scan:
    name: Lint, Format Check & Code Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Check formatting with Prettier
        run: npm run format:check

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        if: always()
        continue-on-error: true

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint-format-code-scan
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless

  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build Angular application
        run: npm run build -- --configuration=production

      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  dockerize:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download production build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo:latest

  deploy:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: dockerize
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15

    steps:
      - name: Deploy using SSH and Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          script: |
            cd /path/to/your/docker-compose-directory
            docker-compose pull
            docker-compose up -d --remove-orphans
