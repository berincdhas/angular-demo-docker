name: autodevops-angular-demo-docker-build-deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: angular-demo-docker-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  code-scanning:
    name: Code Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  install-and-test:
    name: Install Dependencies & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-scanning
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Run tests
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

  build-angular:
    name: Build Angular App
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: install-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build Angular
        run: npm run build -- --configuration production
      - name: Upload built app artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/

  docker-build-publish:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-angular
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Angular artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.IMAGE_NAME }}:latest
      - name: Save Docker Tag
        run: echo ${{ env.IMAGE_NAME }}:${{ env.TAG }} > image_tag.txt
      - name: Upload Docker Tag Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tag
          path: image_tag.txt

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    needs: docker-build-publish
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Docker Tag
        uses: actions/download-artifact@v4
        with:
          name: docker-image-tag
      - name: Set Docker Tag as variable
        id: image
        run: echo "DOCKER_IMAGE=$(cat image_tag.txt)" >> $GITHUB_ENV
      - name: Deploy Application
        id: deploy
        run: |
          echo "Simulated deploy of $DOCKER_IMAGE"
          echo "deployment-url=https://your-production-url.example.com" >> $GITHUB_OUTPUT
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy]
    steps:
      - name: Remove workflow artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            angular-dist
            docker-image-tag