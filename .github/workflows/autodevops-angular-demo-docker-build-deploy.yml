name: autodevops-angular-demo-docker-build-deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: autodevops-angular-demo-docker-build-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  pull-requests: read

jobs:
  build:
    name: Build Angular Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

      - name: Build Angular app
        run: npm run build -- --configuration=production

      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/
          if-no-files-found: error
          retention-days: 3

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production

      - name: Upload Docker image digest
        run: echo "${{ steps.meta.outputs.version }}" > docker.version.txt

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image version artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/

      # Placeholder deployment step, replace with real deployment provider/actions
      - name: Deploy to Kubernetes/Cloud Service
        run: |
          echo "Replace this step with an actual deployment command, e.g., kubectl, helm, or your cloud provider's CLI tool."
        env:
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest

  security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependabot:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run npm audit for vulnerabilities
        run: npm audit --production --audit-level=high || exit 0