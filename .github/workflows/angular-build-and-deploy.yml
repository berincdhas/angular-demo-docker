name: angular-build-and-deploy

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'
  workflow_dispatch:

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  deployments: write

jobs:
  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run Unit Tests
        run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Build Application
        run: npm run build -- --configuration production

      - name: Archive Production Build
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/
  
  dockerize:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    if: github.event_name != 'pull_request'
    environment:
      name: production
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DIST_PATH=dist

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: dockerize
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ secrets.PROD_URL }}
    steps:
      - name: Deploy via SSH and Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:main
            docker stop angular-demo-docker || true
            docker rm angular-demo-docker || true
            docker run -d --name angular-demo-docker -p 80:80 --restart=always ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:main

  codeql:
    name: Code Scanning - CodeQL
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:javascript
