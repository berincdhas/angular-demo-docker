name: angular-build-and-deploy

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main
      - 'release/*'
  workflow_dispatch:

concurrency:
  group: angular-build-deploy-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write
  actions: read

jobs:
  code-scan:
    name: Code Scanning - Security & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Build Angular app
        run: npm run build -- --configuration=production

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    
      - name: Upload Docker image digest
        run: echo "${{ steps.meta.outputs.tags }}" > docker_image_tags.txt

      - name: Upload Docker image tags artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tags
          path: docker_image_tags.txt

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: docker
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: ${{ steps.deploy-to-url.outputs.deployment_url }}

    steps:
      - name: Download Docker image tags artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-tags

      - name: Set Docker tag as environment variable
        run: |
          DOCKER_TAG=$(cat docker_image_tags.txt | head -n1)
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV

      - name: Deploy to production (Kubernetes example)
        uses: azure/k8s-deploy@v4
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          namespace: 'angular-prod'
          manifests: |
            ./k8s/deployment.yaml
            ./k8s/service.yaml
          images: |
            ghcr.io/${{ github.repository }}:${{ env.DOCKER_TAG }}

      - name: Output Deployment URL
        id: deploy-to-url
        run: echo "deployment_url=https://your-production-url.com" >> $GITHUB_OUTPUT
