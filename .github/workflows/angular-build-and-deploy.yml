name: angular-build-and-deploy

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main
      - 'release/*'
  workflow_dispatch:

concurrency:
  group: build-and-deploy-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run npm audit
        run: npm audit --production --audit-level=moderate || exit 0
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    name: Build Angular App
    runs-on: ubuntu-latest
    needs: security-scan
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run Tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --no-progress --code-coverage

      - name: Build app
        run: npm run build -- --configuration production

      - name: Archive Production Build
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    if: github.event_name != 'pull_request'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-angular
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and tag
        id: vars
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "IMG_TAG=ghcr.io/${GITHUB_REPOSITORY}-angular:$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.vars.outputs.IMG_TAG }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy-url.outputs.url }}
    steps:
      - name: Create Deployment Tag
        run: echo "deploying latest docker image to production"
      # Example deploy step (customize to env)
      - name: Deploy with Docker
        id: deploy-url
        run: |
          echo "url=https://your-production-url.example.com" >> $GITHUB_OUTPUT
      # Optionally notify
      - name: Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          slack-message: |
            Deployment of ${{ github.repository }} to production triggered by ${{ github.actor }}. See ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  codeql-upload:
    name: Upload CodeQL Results
    runs-on: ubuntu-latest
    needs: security-scan
    timeout-minutes: 5
    if: always()
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Upload CodeQL Database
        uses: github/codeql-action/upload-database@v3
        with:
          language: javascript
