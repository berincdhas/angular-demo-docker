name: Build, Test, and Deploy Angular Docker Image

on:
  push:
    branches:
      - main
  pull_request:

env:
  REGISTRY: docker.io
  IMAGE_NAME: berincdhas/angular-demo-docker

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (matching Angular usage, e.g., 18.x)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Step 3: Cache npm dependencies for faster builds
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install npm dependencies
      - name: Install dependencies
        run: npm ci

      # Step 5: Run Angular tests (adjust command if needed)
      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadlessNoSandbox

      # Step 5b: Build Angular app for production
      - name: Build Angular app for production
        run: npm run build -- --configuration production

      # Step 6: Set up Docker Buildx for advanced builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Log in to Docker Hub using secrets (make sure secrets are set)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 8: Extract metadata (tags and labels for the image)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 9: Build and tag Docker image with commit SHA and 'latest'
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      # Step 10: Push Docker image to Docker Hub (only on main branch)
      # Pushing is handled in the build step conditionally.

      # Step 11: Optional - Output image URLs
      - name: Output Docker Image URLs
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Image pushed:"
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

# ============================================================
#                          SETUP GUIDE
# ============================================================
# Required secrets (Configure these in your repository settings > Secrets and variables > Actions):
#   - DOCKERHUB_USERNAME: Your Docker Hub username
#   - DOCKERHUB_TOKEN:    A Docker Hub Personal Access Token (not your password!)
#
# Customize 'IMAGE_NAME' in the env section if your Docker Hub repository name is different.
# For private repositories, ensure your Docker Hub account/repo permissions are correctly set.
#
# This workflow does the following:
# - Runs on every push to main (deploys), and on PRs (builds/test only)
# - Caches npm dependencies for faster builds
# - Runs all Angular tests (adjust test/build commands if your scripts differ)
# - Builds your Angular project for production output
# - Builds, tags (latest + commit SHA), and pushes a Docker image to Docker Hub
#
# You can find your image at: https://hub.docker.com/r/<your-username>/angular-demo-docker
# ============================================================
