name: angular-demo-docker-build-and-deploy
on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'
  workflow_dispatch:
concurrency:
  group: angular-demo-docker-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  packages: write
  id-token: write
jobs:
  build-test:
    name: Build and Test Angular Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Unit Tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless
      - name: Lint Code
        run: npm run lint
      - name: Build Application
        run: npm run build -- --configuration=production
      - name: Archive Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
  codeql-analysis:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'
  docker-build-push:
    name: Build and Push Docker Image
    needs: [build-test, codeql-analysis]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Angular Dist Artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: |
            DIST_DIR=dist/
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Image Digest
        run: echo "Digest: ${{ steps.meta.outputs.digest }}"
  deploy:
    name: Deploy Angular Application
    needs: docker-build-push
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: production
      url: ${{ steps.deploy-url.outputs.url }}
    steps:
      - name: Deploy to Production (Placeholder)
        id: deploy-url
        run: |
          echo "Deploy your Docker image here with your actual cloud or orchestration commands."
          echo "url=https://your-production-url.example.com" >> $GITHUB_OUTPUT
      - name: Output Deployment URL
        run: echo "Application deployed to ${{ steps.deploy-url.outputs.url }}"
