name: angular-deploy-pipeline
on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'
  workflow_dispatch:

concurrency:
  group: angular-deploy-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write
  actions: read

env:
  NODE_VERSION: '20.x'
  APP_NAME: angular-demo-docker
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/angular-demo-docker

jobs:
  lint-test-build:
    name: Lint, Test and Build Angular App
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run Tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless

      - name: Build App
        run: npm run build -- --configuration=production

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-app
          path: dist/${{ env.APP_NAME }}
          retention-days: 3

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dockerize-and-push:
    name: Dockerize and Push Image
    runs-on: ubuntu-latest
    needs: lint-test-build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    timeout-minutes: 15
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-app
          path: dist/${{ env.APP_NAME }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest

      - name: Push Docker Images
        run: |
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker push ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: dockerize-and-push
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    environment:
      name: production
      url: ${{ steps.deployment-url.outputs.url }}
    steps:
      - name: Deploy Docker Image (placeholder)
        id: deployment-url
        run: echo "url=https://your-production-url.example.com" >> $GITHUB_OUTPUT

      - name: Notify Deployment Success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'Production Deployment',
              description: 'Deployed successfully',
              target_url: process.env.DEPLOYMENT_URL || ''
            })
