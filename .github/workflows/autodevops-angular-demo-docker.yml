name: autodevops-angular-demo-docker

on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  STAGING_NAMESPACE: staging
  PRODUCTION_NAMESPACE: production

concurrency:
  group: autodevops-angular-demo-docker-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.your-app-domain.com
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" > ~/.kube/config
        env:
          KUBECONFIG_STAGING: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Set namespace
        run: kubectl config set-context --current --namespace=${{ env.STAGING_NAMESPACE }}

      - name: Set Docker image in Kubernetes deployment
        run: |
          kubectl set image deployment/angular-demo angular-demo=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: production
      url: https://your-app-domain.com
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" > ~/.kube/config
        env:
          KUBECONFIG_PRODUCTION: ${{ secrets.KUBECONFIG_PRODUCTION }}

      - name: Set namespace
        run: kubectl config set-context --current --namespace=${{ env.PRODUCTION_NAMESPACE }}

      - name: Set Docker image in Kubernetes deployment
        run: |
          kubectl set image deployment/angular-demo angular-demo=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Security Scanning (optional recommended job)
  codeql-analysis:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3