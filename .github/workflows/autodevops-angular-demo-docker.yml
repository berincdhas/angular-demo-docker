name: autodevops-angular-demo-docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_OPTIONS: --max_old_space_size=4096

concurrency:
  group: gha-autodevops-angular-demo-docker-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  checkout-and-prepare:
    name: Checkout and Prepare
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.choose-node.outputs.node }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Setup Caching for npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Choose Node Version (from .nvmrc or fallback)
        id: choose-node
        run: |
          if [ -f .nvmrc ]; then
            NODE_VERSION=$(cat .nvmrc)
          else
            NODE_VERSION="20"
          fi
          echo "Using Node.js version $NODE_VERSION"
          echo "node=$NODE_VERSION" >> $GITHUB_OUTPUT

  dependency-installation:
    name: Dependency Installation
    runs-on: ubuntu-latest
    needs: checkout-and-prepare
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Use Node.js ${{ needs.checkout-and-prepare.outputs.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.checkout-and-prepare.outputs.node_version }}
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Ensure All Required DevDependencies
        run: |
          missing_dev_deps=0
          npm pkg get devDependencies > dev.json
          if ! grep -q '"@angular-devkit/build-angular"' dev.json; then
            echo "Adding @angular-devkit/build-angular as devDependency"
            npm install --save-dev @angular-devkit/build-angular@latest
            missing_dev_deps=1
          fi
          if ! grep -q '"stylelint"' dev.json; then
            echo "Adding stylelint as devDependency"
            npm install --save-dev stylelint@latest
            missing_dev_deps=1
          fi
          if ! grep -q '"stylelint-config-standard-scss"' dev.json; then
            echo "Adding stylelint-config-standard-scss as devDependency"
            npm install --save-dev stylelint-config-standard-scss@latest
            missing_dev_deps=1
          fi
          if [ $missing_dev_deps -eq 1 ]; then
            echo "Required devDependencies were missing and have been installed."
          fi

  add-stylelintrc:
    name: Ensure Stylelint Configuration
    runs-on: ubuntu-latest
    needs: dependency-installation
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Add default .stylelintrc if missing
        run: |
          if [ ! -f .stylelintrc.json ] && [ ! -f .stylelintrc ] && [ ! -f .stylelintrc.yml ] && [ ! -f .stylelintrc.yaml ]; then
            cat <<EOF > .stylelintrc.json
            {
              "extends": "stylelint-config-standard-scss",
              "rules": {
                "at-rule-no-unknown": [ true, { "ignoreAtRules": ["extend", "at-root", "debug", "warn", "error", "if", "else", "for", "each", "while", "mixin", "include", "function", "return" ] }]
              }
            }
EOF
            echo "Added .stylelintrc.json"
          fi

  linting-formatting:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    needs: [dependency-installation, add-stylelintrc]
    timeout-minutes: 10
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Use Node.js ${{ needs.checkout-and-prepare.outputs.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.checkout-and-prepare.outputs.node_version }}
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Check for lint script
        id: lint-script
        run: |
          if grep -q '"lint":' package.json; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            npm pkg set scripts.lint="eslint . --ext .ts,.tsx,.js,.jsx --max-warnings=0"
            echo "Added lint script to package.json"
            echo "found=true" >> $GITHUB_OUTPUT
          fi
      - name: Run ESLint
        if: steps.lint-script.outputs.found == 'true'
        run: npm run lint
      - name: Run Stylelint
        run: npx stylelint "**/*.scss"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: dependency-installation
    timeout-minutes: 10
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Use Node.js ${{ needs.checkout-and-prepare.outputs.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.checkout-and-prepare.outputs.node_version }}
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Build Angular App
        run: npm run build -- --configuration production

  unit-test:
    name: Unit and Component Testing
    runs-on: ubuntu-latest
    needs: dependency-installation
    timeout-minutes: 18
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Use Node.js ${{ needs.checkout-and-prepare.outputs.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.checkout-and-prepare.outputs.node_version }}
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Ensure @angular-devkit/build-angular:karma installed
        run: |
          if ! npm ls @angular-devkit/build-angular > /dev/null 2>&1; then
            npm install --save-dev @angular-devkit/build-angular@latest
          fi
      - name: Run Tests with Coverage
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

  e2e-test:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Use Node.js ${{ needs.checkout-and-prepare.outputs.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.checkout-and-prepare.outputs.node_version }}
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Run E2E Tests
        run: npm run e2e -- --configuration production

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ github.sha }} .
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ github.sha }}

  docker-harden:
    name: Docker Harden (Trivy Scan)
    runs-on: ubuntu-latest
    needs: docker-build
    timeout-minutes: 8
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  docker-publish-ghcr:
    name: Publish Image to GHCR
    runs-on: ubuntu-latest
    needs: [docker-build, docker-harden]
    timeout-minutes: 5
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag Image for GHCR
        run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/angular-demo-docker:${{ github.sha }}
      - name: Push GHCR Image
        run: docker push ghcr.io/${{ github.repository_owner }}/angular-demo-docker:${{ github.sha }}

  docker-snyk:
    name: Snyk Container Scan
    runs-on: ubuntu-latest
    needs: docker-build
    timeout-minutes: 6
    steps:
      - name: Snyk Scan
        uses: snyk/actions/docker@0.5.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:${{ github.sha }}
          args: --file=Dockerfile

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-publish-ghcr, docker-harden, e2e-test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 8
    steps:
      - name: Deploy to Staging Server
        run: echo "Deploying image to staging..." # Replace with actual deployment script

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    timeout-minutes: 2
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v4
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
