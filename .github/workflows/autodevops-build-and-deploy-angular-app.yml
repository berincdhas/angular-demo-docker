name: build-and-deploy-angular-app

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-angular-app:
    name: Build Angular Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint || (echo "Linter failed, see output above." && exit 1)

      - name: Upload ESLint Report on Failure
        if: failure() && steps.run_linter.outcome == 'failure'
        run: |
          if [ -f eslint-report.html ]; then
            echo "Uploading linter error report"
          fi

      - name: Run Unit Tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless

      - name: Build Angular App
        run: npm run build -- --prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  build-and-push-docker-image:
    name: Build & Push Docker Image
    needs: build-angular-app
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ needs.build-angular-app.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/angular-demo:latest

  deploy:
    name: Deploy to Production
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ needs.build-and-push-docker-image.result == 'success' }}
    steps:
      - name: SSH & Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_SERVER_HOST }}
          username: ${{ secrets.PRODUCTION_SERVER_USER }}
          key: ${{ secrets.PRODUCTION_SERVER_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SERVER_SSH_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/angular-demo:latest
            docker stop angular-demo || true
            docker rm angular-demo || true
            docker run -d --name angular-demo -p 80:80 ${{ secrets.DOCKER_USERNAME }}/angular-demo:latest
