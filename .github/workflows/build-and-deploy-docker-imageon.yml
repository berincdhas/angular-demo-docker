name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Define a matrix of Node versions to build against
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Step 1: Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the specified Node.js version from the matrix
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install dependencies and build Angular app
      - name: Install dependencies and build Angular app
        run: |
          npm ci
          npm run build --prod

      # Step 4: Set up Docker Buildx for advanced build features, including caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Login to Docker Hub using secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Extract Docker metadata (e.g., image tags/labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker
          tags: latest

      # Step 7: Build and push Docker image, using cache for efficiency
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # Set image name and tags from metadata step
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build cache
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/angular-demo-docker:buildcache,mode=max
          # Pushes both the cache and the built image
          push: true

      # Step 8: Output success message for visibility
      - name: Deployment result
        run: echo "Docker image built and pushed to Docker Hub with tag 'latest' for Node version ${{ matrix.node-version }}"
